
import os
import time
import json
import threading
import tkinter as tk
from tkinter import filedialog, messagebox, Toplevel
from tkinter.scrolledtext import ScrolledText
from typing import Optional, List, Tuple

# === –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ ===
from config import SYSTEM_PROMPT_PATH, DEFAULT_MODEL
from vector_store_query import run_extraction_with_vector_store
from uploader import upload_to_vector_store_ex
from vector_store_cleanup import cleanup_store

from config import (
    WINDOW_SIZE, WINDOW_TITLE,
    AUTO_DELETE_DEFAULT_MIN, AUTO_DELETE_MIN_LIMIT,
    LOG_FONT, LOG_TEXT_HEIGHT,
    PAD_X, PAD_Y, PAD_Y_LOG, PAD_ENTRY, PAD_CHECK,
    JOURNAL_WINDOW_SIZE, JOURNAL_MAX_RECORDS, PAD_BTN
)

from gui_layout import build_top_panel, build_log_area, build_status_bar

# –ñ—É—Ä–Ω–∞–ª ‚Äî –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã GUI –Ω–µ –ø–∞–¥–∞–ª, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω
try:
    from log_journal import append_upload_entry, read_last
    _JOURNAL_OK = True
except Exception as _e:
    append_upload_entry = None  # type: ignore
    read_last = None            # type: ignore
    _JOURNAL_OK = False


class VectorStoreGUI(tk.Tk):

    def __init__(self):
        super().__init__()
        self.title(WINDOW_TITLE)
        self.geometry(WINDOW_SIZE)

        self.selected_files: List[str] = []
        self.store_id: Optional[str] = None  # —Å—é–¥–∞ –ø–æ–ª–æ–∂–∏–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞

        build_top_panel(self, self, _JOURNAL_OK)
        build_log_area(self, self)
        build_status_bar(self, self)

    # ====================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ======================

    def _log(self, msg: str, also_print: bool = True):
        self.txt_logs.insert(tk.END, msg + "\n")
        self.txt_logs.see(tk.END)
        self.update_idletasks()
        if also_print:
            print(msg, flush=True)

    def _set_busy(self, busy: bool):
        state = "disabled" if busy else "normal"
        self.btn_select.config(state=state)
        self.btn_upload.config(state=state)
        # –ö–Ω–æ–ø–∫—É "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å" –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å store_id
        self.btn_process.config(state=state if self.store_id else "disabled")
        self.status.set("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è‚Ä¶" if busy else "–ì–æ—Ç–æ–≤–æ")
        self.update_idletasks()

    # ====================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ UI ======================

    def select_files(self):
        filetypes = [
            ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "*.pdf *.docx *.doc *.xlsx *.xls *.txt *.md"),
            ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*"),
        ]
        paths = filedialog.askopenfilenames(title="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", filetypes=filetypes)
        if not paths:
            return

        self.selected_files = list(paths)
        self.txt_logs.delete("1.0", tk.END)

        self._log("–í—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã:")
        for p in self.selected_files:
            self._log(f" ‚Ä¢ {os.path.basename(p)}")

    def upload_files(self):
        if not self.selected_files:
            messagebox.showwarning("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã")
            return

        try:
            total_size_bytes = sum(os.path.getsize(p) for p in self.selected_files)
        except OSError:
            total_size_bytes = 0

        self._set_busy(True)
        self._log("\n‚Äî –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É‚Ä¶")

        def on_progress(msg: str):
            self._log(msg, also_print=False)

        def bg_task():
            start = time.perf_counter()
            try:
                # –í–ê–ñ–ù–û: –∂–¥—ë–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é, —á—Ç–æ–±—ã file_search –≤–∏–¥–µ–ª –∫–æ–Ω—Ç–µ–Ω—Ç
                result = upload_to_vector_store_ex(
                    self.selected_files,
                    on_progress=on_progress,
                    wait_index=True,   # ‚Üê –∫–ª—é—á–µ–≤–æ–π —Ñ–ª–∞–≥
                )
                elapsed = time.perf_counter() - start

                speed_kb_s: Optional[float] = None
                if total_size_bytes > 0 and elapsed > 0:
                    speed_kb_s = (total_size_bytes / 1024.0) / elapsed

                # --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º store_id –∏ –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å"
                self.store_id = (result or {}).get("store_id")
                if self.store_id:
                    self._log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω Store ID: {self.store_id}")
                else:
                    self._log("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ store_id –Ω–µ –ø–æ–ª—É—á–µ–Ω.")

                # === –ñ–£–†–ù–ê–õ: –∑–∞–ø–∏—Å—å —ç—Ç–∞–ø–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ===
                if _JOURNAL_OK and append_upload_entry is not None:
                    try:
                        files_info: List[Tuple[str, int]] = []
                        for p in self.selected_files:
                            try:
                                files_info.append((p, os.path.getsize(p)))
                            except OSError:
                                files_info.append((p, 0))
                        append_upload_entry(
                            store_id=self.store_id,
                            files=files_info,
                            elapsed_sec=elapsed,
                            avg_speed_kb_s=speed_kb_s if speed_kb_s is not None else None,
                        )
                        self._log("üìù –ó–∞–ø–∏—Å—å –æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª.", also_print=False)
                    except Exception as _log_err:
                        self._log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∂—É—Ä–Ω–∞–ª (upload): {_log_err}", also_print=False)

                # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é
                if self.auto_delete_var.get() and self.store_id:
                    try:
                        delay_min = int(self.delete_delay_var.get().strip() or AUTO_DELETE_DEFAULT_MIN)
                    except ValueError:
                        delay_min = AUTO_DELETE_DEFAULT_MIN

                    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ = 1 –º–∏–Ω—É—Ç–∞
                    if delay_min < AUTO_DELETE_MIN_LIMIT:
                        self._log("‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–Ω—å—à–µ 1 –º–∏–Ω—É—Ç—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 30 –º–∏–Ω—É—Ç.")
                        delay_min = AUTO_DELETE_DEFAULT_MIN

                    def delayed_cleanup():
                        try:
                            if delay_min > 0:
                                time.sleep(delay_min * 60)
                            cleanup_store(self.store_id)  # type: ignore[arg-type]
                            self.after(0, lambda: self._log(f"üóë –•—Ä–∞–Ω–∏–ª–∏—â–µ {self.store_id} —É–¥–∞–ª–µ–Ω–æ."))
                        except Exception as e:
                            self.after(0, lambda err=e: self._log(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {self.store_id}: {err}"))

                    threading.Thread(target=delayed_cleanup, daemon=True).start()

                def done_ui():
                    self._log(f"\n‚è± –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏): {elapsed:.2f} —Å–µ–∫.")
                    if speed_kb_s is not None:
                        self._log(f"‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {speed_kb_s:.2f} –ö–ë/—Å–µ–∫.")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å"
                    if self.store_id:
                        self.status.set(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. Store ID: {self.store_id}")
                        self.btn_process.config(state="normal")
                        self._log("\n‚Äî –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º—Ç—É‚Ä¶")
                        # –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                        self._process_now()
                    else:
                        self.status.set("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ store_id –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
                        self.btn_process.config(state="disabled")

                    # –ò–Ω—Ñ–æ –∏–∑ uploader (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if result and "summary" in result:
                        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", result["summary"])

                self.after(0, done_ui)

            except Exception as e:
                self.after(0, lambda err=e: messagebox.showerror("–û—à–∏–±–∫–∞", str(err)))
            finally:
                self.after(0, lambda: self._set_busy(False))

        threading.Thread(target=bg_task, daemon=True).start()

    def on_process_click(self):
        # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
        self._process_now()

    # ====================== –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç ======================

    def _process_now(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ Responses API –∏ –≤—ã–≤–µ—Å—Ç–∏ JSON –≤ —ç—Ç–æ –∂–µ –æ–∫–Ω–æ."""
        if not self.store_id:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ Store ID.")
            return

        self.btn_process.config(state="disabled")
        self.status.set("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º—Ç—É‚Ä¶")

        def worker():
            try:
                json_text = run_extraction_with_vector_store(
                    store_id=self.store_id,
                    user_instruction="–ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º—Ç—É.",
                    model=DEFAULT_MODEL,
                    system_prompt_path=SYSTEM_PROMPT_PATH,
                )
            except Exception as e:
                self.after(0, lambda err=e: messagebox.showerror("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", str(err)))
                self.after(0, lambda: self.btn_process.config(state="normal"))
                self.after(0, lambda: self.status.set("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏."))
                return

            def show_result():
                self.status.set("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                self.btn_process.config(state="normal")
                # –ü—ã—Ç–∞–µ–º—Å—è –∫—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å JSON
                try:
                    pretty = json.dumps(json.loads(json_text), ensure_ascii=False, indent=2)
                except Exception:
                    pretty = json_text
                self._log("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø (JSON) ===")
                self._log(pretty, also_print=False)
                self._log("=== –ö–û–ù–ï–¶ –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===\n")

            self.after(0, show_result)

        threading.Thread(target=worker, daemon=True).start()

    # ====================== –ü—Ä–æ—Å–º–æ—Ç—Ä –∂—É—Ä–Ω–∞–ª–∞ ======================

    def show_journal(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–ø–∏—Å–µ–π –∂—É—Ä–Ω–∞–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ."""
        if not _JOURNAL_OK or read_last is None:
            messagebox.showwarning("–ñ—É—Ä–Ω–∞–ª", "–ú–æ–¥—É–ª—å log_journal.py –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
        entries = []
        try:
            entries = read_last(JOURNAL_MAX_RECORDS)  # type: ignore[call-arg]
        except Exception as e:
            messagebox.showerror("–ñ—É—Ä–Ω–∞–ª", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∂—É—Ä–Ω–∞–ª: {e}")
            return

        win = Toplevel(self)
        win.title("–ñ—É—Ä–Ω–∞–ª (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏)")
        win.geometry(JOURNAL_WINDOW_SIZE)

        txt = ScrolledText(win, wrap=tk.WORD, font=("Consolas", 10))
        txt.pack(fill=tk.BOTH, expand=True)

        if not entries:
            txt.insert(tk.END, "–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.\n")
        else:
            for row in entries:
                try:
                    txt.insert(tk.END, json.dumps(row, ensure_ascii=False, indent=2) + "\n\n")
                except Exception:
                    txt.insert(tk.END, f"{row}\n\n")
        txt.see(tk.END)


if __name__ == "__main__":
    app = VectorStoreGUI()
    app.mainloop()
