# -*- coding: utf-8 -*-
import os
import time
import threading
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter.scrolledtext import ScrolledText
from typing import Callable, Optional, List

import vector_store_cleanup as vsc


class VectorStoreGUI(tk.Tk):
    """
    –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Vector Store.

    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
      ‚Ä¢ –í—ã–±–æ—Ä –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –∂–∏–≤—ã–º –ª–æ–≥–æ–º –∏ –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏/—Å–∫–æ—Ä–æ—Å—Ç–∏.
      ‚Ä¢ –ö–Ω–æ–ø–∫–∞ ¬´–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞¬ª (—É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã –∏ —Å–∞–º–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞).
    """

    def __init__(self, on_upload: Optional[Callable] = None):
        super().__init__()
        self.title("Vector Store Uploader")
        self.geometry("820x560")

        self.selected_files: List[str] = []
        self.on_upload = on_upload  # upload_to_vector_store(paths, on_progress, wait_index)

        # ---------- –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å ----------
        top = tk.Frame(self)
        top.pack(fill=tk.X, padx=10, pady=8)

        self.btn_select = tk.Button(top, text="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã", command=self.select_files)
        self.btn_select.pack(side=tk.LEFT)

        self.btn_upload = tk.Button(top, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Vector Store", command=self.upload_files)
        self.btn_upload.pack(side=tk.LEFT, padx=8)

        self.btn_cleanup = tk.Button(top, text="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞", command=self.cleanup_all_stores)
        self.btn_cleanup.pack(side=tk.LEFT, padx=8)

        # ---------- –ü–æ–ª–µ –ª–æ–≥–æ–≤ ----------
        self.txt_logs = ScrolledText(self, height=24, wrap=tk.WORD)
        self.txt_logs.pack(fill=tk.BOTH, expand=True, padx=10, pady=6)

        # ---------- –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ ----------
        bottom = tk.Frame(self)
        bottom.pack(fill=tk.X, padx=10, pady=(0, 8))

        self.status = tk.StringVar(value="–ì–æ—Ç–æ–≤–æ")
        tk.Label(bottom, textvariable=self.status, anchor="w").pack(side=tk.LEFT)

    # ====================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ======================

    def _log(self, msg: str, also_print: bool = True):
        """–ü–∏—à–µ–º –≤ –ª–æ–≥ UI (–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥—É–±–ª–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å)."""
        self.txt_logs.insert(tk.END, msg + "\n")
        self.txt_logs.see(tk.END)
        self.update_idletasks()
        if also_print:
            print(msg, flush=True)

    def _set_busy(self, busy: bool):
        state = "disabled" if busy else "normal"
        self.btn_select.config(state=state)
        self.btn_upload.config(state=state)
        self.btn_cleanup.config(state=state)
        self.status.set("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è‚Ä¶" if busy else "–ì–æ—Ç–æ–≤–æ")
        self.update_idletasks()

    # ====================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ UI ======================

    def select_files(self):
        filetypes = [
            ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "*.pdf *.docx *.doc *.xlsx *.xls *.txt *.md"),
            ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*"),
        ]
        paths = filedialog.askopenfilenames(title="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", filetypes=filetypes)
        if not paths:
            return

        self.selected_files = list(paths)
        self.txt_logs.delete("1.0", tk.END)

        self._log("–í—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã:")
        for p in self.selected_files:
            self._log(f" ‚Ä¢ {os.path.basename(p)}")

    def upload_files(self):
        if not self.selected_files:
            messagebox.showwarning("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã")
            return

        if not callable(self.on_upload):
            names = [os.path.basename(f) for f in self.selected_files]
            messagebox.showinfo("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤",
                                "–§–∞–π–ª—ã –±—ã–ª–∏ –±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Vector Store:\n\n" + "\n".join(names))
            return

        try:
            total_size_bytes = sum(os.path.getsize(p) for p in self.selected_files)
        except OSError:
            total_size_bytes = 0

        self._set_busy(True)
        self._log("\n‚Äî –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É‚Ä¶")

        def on_progress(msg: str):
            self._log(msg, also_print=False)

        def bg_task():
            start = time.perf_counter()
            try:
                result_msg = self.on_upload(self.selected_files, on_progress=on_progress, wait_index=False)
                elapsed = time.perf_counter() - start

                speed_kb_s = None
                if total_size_bytes > 0 and elapsed > 0:
                    speed_kb_s = (total_size_bytes / 1024.0) / elapsed

                def done_ui():
                    self._log(f"\n‚è± –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏): {elapsed:.2f} —Å–µ–∫.")
                    if speed_kb_s is not None:
                        self._log(f"‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {speed_kb_s:.2f} –ö–ë/—Å–µ–∫.")
                    final = result_msg + f"\n\n‚è± –í—Ä–µ–º—è: {elapsed:.2f} —Å–µ–∫."
                    if speed_kb_s is not None:
                        final += f"\n‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {speed_kb_s:.2f} –ö–ë/—Å–µ–∫."
                    messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", final)

                self.after(0, done_ui)

            except Exception as e:
                self.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", str(e)))
            finally:
                self.after(0, lambda: self._set_busy(False))

        threading.Thread(target=bg_task, daemon=True).start()

    def cleanup_all_stores(self):
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–∞–∂–¥–æ–≥–æ Vector Store –∏ —Å–∞–º–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
        self._set_busy(True)
        self._log("\nüßπ –ó–∞–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö Vector Stores‚Ä¶")

        def bg_cleanup():
            try:
                api_key = vsc.load_api_key()
                stores = vsc.list_all_vector_stores(api_key)

                if not stores:
                    self.after(0, lambda: self._log("‚úÖ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö Vector Stores ‚Äî –æ—á–∏—â–∞—Ç—å –Ω–µ—á–µ–≥–æ."))
                    return

                self.after(0, lambda: self._log(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â: {len(stores)}\n"))

                for store in stores:
                    store_id = store.get("id")
                    name = store.get("name", "(–±–µ–∑ –∏–º–µ–Ω–∏)")
                    self.after(0, lambda n=name, sid=store_id: self._log(f"üóÇ  –•—Ä–∞–Ω–∏–ª–∏—â–µ: {n} ({sid})"))

                    try:
                        files = vsc.list_files(api_key, store_id)
                    except Exception as e:
                        self.after(0, lambda e=e: self._log(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}"))
                        continue

                    for f in files:
                        fid = f.get("id")
                        try:
                            vsc.delete_file(api_key, store_id, fid)
                            self.after(0, lambda fid=fid: self._log(f"   ‚úÖ –§–∞–π–ª —É–¥–∞–ª—ë–Ω: {fid}"))
                        except Exception as e:
                            self.after(0, lambda fid=fid, e=e: self._log(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {fid}: {e}"))

                    try:
                        vsc.delete_vector_store(api_key, store_id)
                        self.after(0, lambda: self._log("   üóë –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–¥–∞–ª–µ–Ω–æ."))
                    except Exception as e:
                        self.after(0, lambda sid=store_id, e=e: self._log(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ {sid}: {e}"))

                    self.after(0, lambda: self._log("-" * 50))

                self.after(0, lambda: self._log("\n‚ú® –í—Å–µ Vector Stores —É–¥–∞–ª–µ–Ω—ã."))
                self.after(0, lambda: messagebox.showinfo("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "–í—Å–µ Vector Stores —É–¥–∞–ª–µ–Ω—ã."))

            except Exception as e:
                self.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏", str(e)))
            finally:
                self.after(0, lambda: self._set_busy(False))

        threading.Thread(target=bg_cleanup, daemon=True).start()


if __name__ == "__main__":
    app = VectorStoreGUI(on_upload=None)
    app.mainloop()
