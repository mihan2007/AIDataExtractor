# vector_store_gui.py ‚Äî –æ–±–ª–µ–≥—á—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä GUI
import os
import time
import json
import threading
import tkinter as tk
from tkinter import filedialog, messagebox, Toplevel
from tkinter.scrolledtext import ScrolledText
from typing import Optional, List, Tuple

from infra.config import (
    SYSTEM_PROMPT_PATH, DEFAULT_MODEL,
    WINDOW_SIZE, WINDOW_TITLE,
    AUTO_DELETE_DEFAULT_MIN, AUTO_DELETE_MIN_LIMIT,
    LOG_FONT, PAD_X, PAD_Y, JOURNAL_WINDOW_SIZE, JOURNAL_MAX_RECORDS
)

# –°–±–æ—Ä–∫–∞ UI
from ui.gui_layout import build_top_panel, build_log_area, build_status_bar

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª
try:
    from infra.log_journal import append_upload_entry, read_last
    _JOURNAL_OK = True
except Exception:
    append_upload_entry = None  # type: ignore
    read_last = None            # type: ignore
    _JOURNAL_OK = False

# –ë—ç–∫–µ–Ω–¥-–æ–ø–µ—Ä–∞—Ü–∏–∏
from core.uploader import upload_to_vector_store_ex
from core.vector_store_cleanup import schedule_cleanup
from core.vector_store_query import run_extraction_with_vector_store


class VectorStoreGUI(tk.Tk):
    """
    –¢–æ–Ω–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä:
      - —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ (selected_files, store_id),
      - –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ uploader/vector_store_query/vector_store_cleanup,
      - –æ–±–Ω–æ–≤–ª—è–µ—Ç UI (–ª–æ–≥–∏/–∫–Ω–æ–ø–∫–∏/—Å—Ç–∞—Ç—É—Å).
    """
    def __init__(self):
        super().__init__()
        self.title(WINDOW_TITLE)
        self.geometry(WINDOW_SIZE)

        # –§–ª–∞–≥ –¥–ª—è build_top_panel(app)
        self.journal_ok = _JOURNAL_OK

        # ---------- –î–∞–Ω–Ω—ã–µ/—Å–æ—Å—Ç–æ—è–Ω–∏–µ ----------
        self.selected_files: List[str] = []
        self.store_id: Optional[str] = None

        # ---------- Tk-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ----------
        self.status: tk.StringVar = tk.StringVar(value="–ì–æ—Ç–æ–≤–æ")
        self.auto_delete_var: tk.BooleanVar = tk.BooleanVar(value=True)
        self.delete_delay_var: tk.StringVar = tk.StringVar(value=str(AUTO_DELETE_DEFAULT_MIN))

        # ---------- –í–∏–¥–∂–µ—Ç—ã (–∑–∞–ø–æ–ª–Ω—è—Ç—Å—è –±–∏–ª–¥–µ—Ä–∞–º–∏) ----------
        self.btn_select = None
        self.btn_upload = None
        self.btn_process = None
        self.btn_show_journal = None
        self.txt_logs: Optional[ScrolledText] = None
        self.status_bar = None
        self.progress = None

        # ---------- –°–±–æ—Ä–∫–∞ UI ----------
        build_top_panel(self)           # —Ç–æ–ª—å–∫–æ app
        build_log_area(self, self)      # master, app
        build_status_bar(self, self)    # master, app

    # ====================== –£—Ç–∏–ª–∏—Ç—ã UI ======================
    def _log(self, msg: str, also_print: bool = True):
        if self.txt_logs:
            self.txt_logs.insert(tk.END, msg + "\n")
            self.txt_logs.see(tk.END)
            self.update_idletasks()
        if also_print:
            print(msg, flush=True)

    def _set_busy(self, busy: bool):
        state = "disabled" if busy else "normal"
        if self.btn_select:  self.btn_select.config(state=state)
        if self.btn_upload:  self.btn_upload.config(state=state)
        if self.btn_process: self.btn_process.config(state=state if self.store_id else "disabled")
        self.status.set("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è‚Ä¶" if busy else "–ì–æ—Ç–æ–≤–æ")
        self.update_idletasks()

    # ====================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ UI ======================
    def select_files(self):
        filetypes = [
            ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "*.pdf *.docx *.doc *.xlsx *.xls *.txt *.md"),
            ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*"),
        ]
        paths = filedialog.askopenfilenames(title="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", filetypes=filetypes)
        if not paths:
            return

        self.selected_files = list(paths)
        if self.txt_logs:
            self.txt_logs.delete("1.0", tk.END)

        self._log("–í—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã:")
        for p in self.selected_files:
            self._log(f" ‚Ä¢ {os.path.basename(p)}")

    def upload_files(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Vector Store (–¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç—Å—è uploader'—É)."""
        if not self.selected_files:
            messagebox.showwarning("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã")
            return

        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è UI-–º–µ—Ç—Ä–∏–∫–∏
        try:
            total_size_bytes = sum(os.path.getsize(p) for p in self.selected_files)
        except OSError:
            total_size_bytes = 0

        self._set_busy(True)
        self._log("\n‚Äî –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É‚Ä¶")

        def on_progress(msg: str):
            self._log(msg, also_print=False)

        def bg_task():
            start = time.perf_counter()
            try:
                result = upload_to_vector_store_ex(
                    self.selected_files,
                    on_progress=on_progress,
                    wait_index=True,  # –∂–¥—ë–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
                )
                elapsed = time.perf_counter() - start

                speed_kb_s: Optional[float] = None
                if total_size_bytes > 0 and elapsed > 0:
                    speed_kb_s = (total_size_bytes / 1024.0) / elapsed

                # Store ID
                self.store_id = (result or {}).get("store_id")
                if self.store_id:
                    self._log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω Store ID: {self.store_id}")
                else:
                    self._log("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ store_id –Ω–µ –ø–æ–ª—É—á–µ–Ω.")

                # –ñ–£–†–ù–ê–õ (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
                if _JOURNAL_OK and append_upload_entry is not None:
                    try:
                        files_info: List[Tuple[str, int]] = []
                        for p in self.selected_files:
                            try:
                                files_info.append((p, os.path.getsize(p)))
                            except OSError:
                                files_info.append((p, 0))
                        append_upload_entry(
                            store_id=self.store_id,
                            files=files_info,
                            elapsed_sec=elapsed,
                            avg_speed_kb_s=speed_kb_s if speed_kb_s is not None else None,
                        )
                        self._log("üìù –ó–∞–ø–∏—Å—å –æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª.", also_print=False)
                    except Exception as _log_err:
                        self._log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∂—É—Ä–Ω–∞–ª (upload): {_log_err}", also_print=False)

                # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ ‚Äî –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–æ –≤ vector_store_cleanup
                if self.auto_delete_var.get() and self.store_id:
                    try:
                        delay_min = int(self.delete_delay_var.get().strip() or AUTO_DELETE_DEFAULT_MIN)
                    except ValueError:
                        delay_min = AUTO_DELETE_DEFAULT_MIN

                    if delay_min < AUTO_DELETE_MIN_LIMIT:
                        self._log("‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–Ω—å—à–µ 1 –º–∏–Ω—É—Ç—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 30 –º–∏–Ω—É—Ç.")
                        delay_min = AUTO_DELETE_DEFAULT_MIN

                    schedule_cleanup(
                        self.store_id,
                        delay_min,
                        on_done=lambda sid: self.after(0, lambda: self._log(f"üóë –•—Ä–∞–Ω–∏–ª–∏—â–µ {sid} —É–¥–∞–ª–µ–Ω–æ.")),
                        on_error=lambda sid, e: self.after(0, lambda: self._log(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {sid}: {e}")),
                    )

                def done_ui():
                    self._log(f"\n‚è± –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏): {elapsed:.2f} —Å–µ–∫.")
                    if speed_kb_s is not None:
                        self._log(f"‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {speed_kb_s:.2f} –ö–ë/—Å–µ–∫.")
                    if self.store_id:
                        self.status.set(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. Store ID: {self.store_id}")
                        if self.btn_process:
                            self.btn_process.config(state="normal")
                        self._log("\n‚Äî –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º—Ç—É‚Ä¶")
                        self._process_now()  # –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    else:
                        self.status.set("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ store_id –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
                        if self.btn_process:
                            self.btn_process.config(state="disabled")
                    if result and "summary" in result:
                        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", result["summary"])

                self.after(0, done_ui)

            except Exception as e:
                self.after(0, lambda err=e: messagebox.showerror("–û—à–∏–±–∫–∞", str(err)))
            finally:
                self.after(0, lambda: self._set_busy(False))

        threading.Thread(target=bg_task, daemon=True).start()

    def on_process_click(self):
        self._process_now()

    def _process_now(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º—Ç—É (–¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç—Å—è vector_store_query)."""
        if not self.store_id:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ Store ID.")
            return

        if self.btn_process:
            self.btn_process.config(state="disabled")
        self.status.set("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º—Ç—É‚Ä¶")

        def worker():
            try:
                pretty_json = run_extraction_with_vector_store(
                    store_id=self.store_id,
                    user_instruction="–ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º—Ç—É.",
                    model=DEFAULT_MODEL,
                    system_prompt_path=SYSTEM_PROMPT_PATH,
                )
            except Exception as e:
                self.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", str(e)))
                self.after(0, lambda: self.btn_process.config(state="normal") if self.btn_process else None)
                self.after(0, lambda: self.status.set("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏."))
                return

            def show_result():
                self.status.set("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                if self.btn_process:
                    self.btn_process.config(state="normal")
                self._log("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø (JSON) ===")
                self._log(pretty_json, also_print=False)
                self._log("=== –ö–û–ù–ï–¶ –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===\n")

            self.after(0, show_result)

        threading.Thread(target=worker, daemon=True).start()

    # ====================== –ü—Ä–æ—Å–º–æ—Ç—Ä –∂—É—Ä–Ω–∞–ª–∞ ======================
    def show_journal(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–ø–∏—Å–µ–π –∂—É—Ä–Ω–∞–ª–∞ (–µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω)."""
        if not self.journal_ok or read_last is None:
            messagebox.showwarning("–ñ—É—Ä–Ω–∞–ª", "–ú–æ–¥—É–ª—å log_journal.py –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        top = Toplevel(self)
        top.title("–ñ—É—Ä–Ω–∞–ª –∑–∞–≥—Ä—É–∑–æ–∫")
        top.geometry(JOURNAL_WINDOW_SIZE)

        text = ScrolledText(top, wrap=tk.WORD, font=LOG_FONT)
        text.pack(fill=tk.BOTH, expand=True, padx=PAD_X, pady=PAD_Y)

        try:
            rows = read_last(JOURNAL_MAX_RECORDS)  # type: ignore[misc]
        except Exception as e:
            messagebox.showerror("–ñ—É—Ä–Ω–∞–ª", str(e))
            return

        if not rows:
            text.insert(tk.END, "–ü–æ–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.\n")
        else:
            for row in rows:
                try:
                    text.insert(tk.END, json.dumps(row, ensure_ascii=False, indent=2) + "\n\n")
                except Exception:
                    text.insert(tk.END, str(row) + "\n\n")

        text.see(tk.END)
