# core/pipeline.py
# -*- coding: utf-8 -*-
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π ¬´pipeline¬ª:
  1) –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ Vector Store (—Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
  2) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∂–¥—ë—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
  3) –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ system.prompt –∏ file_search
  4) –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±—â–∏–π –∂—É—Ä–Ω–∞–ª (–¥–µ–ª–∞–µ—Ç run_extraction_with_vector_store)
  5) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ø–∏—é —Ç–æ–π –∂–µ –∑–∞–ø–∏—Å–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
  6) –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ Vector Store —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
"""

from __future__ import annotations

import json
import os
from datetime import datetime
from typing import Callable, Optional, Sequence
from uuid import uuid4

from core.uploader import upload_to_vector_store_ex
from core.vector_store_query import run_extraction_with_vector_store
from core.vector_store_cleanup import schedule_cleanup
from infra.config import (
    DEFAULT_MODEL,
    SYSTEM_PROMPT_PATH,
    AUTO_DELETE_DEFAULT_MIN,
)

# ----------------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ -----------------------------

def _ensure_dir(path: str) -> None:
    if path:
        os.makedirs(path, exist_ok=True)

def _unique_filename(prefix: str, store_id: Optional[str], ext: str = "json") -> str:
    stamp = datetime.now().strftime("%Y%m%d-%H%M%S")
    sid = (store_id or "noid").replace("/", "_")
    suf = uuid4().hex[:6]
    return f"{prefix}_{stamp}_{sid}_{suf}.{ext}"

def _save_result_record(save_dir: str, store_id: str, clean_json: str) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø–∏—Å—å –¢–ê–ö–û–ì–û –ñ–ï –í–ò–î–ê, —á—Ç–æ –∏ –≤ –∂—É—Ä–Ω–∞–ª–µ:
      {
        "ts": "...",
        "phase": "result",
        "result": <–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON>,
        "note": "validated"
      }
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
    """
    _ensure_dir(save_dir)
    out_path = os.path.join(save_dir, _unique_filename("extract", store_id, "json"))

    try:
        payload = json.loads(clean_json)
    except Exception:
        # fallback (–Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è, —Ç.–∫. clean_json —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω)
        payload = {"raw_text": clean_json}

    record = {
        "ts": datetime.now().isoformat(timespec="seconds"),
        "phase": "result",
        "result": payload,
        "note": "validated",
    }
    with open(out_path, "w", encoding="utf-8") as f:
        json.dump(record, f, ensure_ascii=False, indent=2)
    return out_path


# ------------------------------ –†–µ–∑—É–ª—å—Ç–∞—Ç API ------------------------------

class PipelineResult:
    """
    –ò—Ç–æ–≥ —Ä–∞–±–æ—Ç—ã pipeline:
      - store_id: —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      - clean_json: –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (None, –µ—Å–ª–∏ –Ω–µ –∂–¥–∞–ª–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é)
      - saved_copy: –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∫–æ–ø–∏–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–µ—Å–ª–∏ save_dir –∑–∞–¥–∞–Ω)
    """
    def __init__(self, store_id: str, clean_json: Optional[str], saved_copy: Optional[str]):
        self.store_id = store_id
        self.clean_json = clean_json
        self.saved_copy = saved_copy

    def __repr__(self) -> str:
        return f"PipelineResult(store_id={self.store_id!r}, clean_json={bool(self.clean_json)}, saved_copy={self.saved_copy!r})"


# --------------------------------- Pipeline --------------------------------

def run_pipeline(
    files: Sequence[str],
    *,
    wait_index: bool = True,
    save_dir: Optional[str] = None,
    on_progress: Optional[Callable[[str], None]] = None,
    user_instruction: str = "–ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É.",
    model: str = DEFAULT_MODEL,
    system_prompt_path: str = SYSTEM_PROMPT_PATH,
    auto_cleanup_min: Optional[int] = AUTO_DELETE_DEFAULT_MIN,
) -> PipelineResult:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è. –ë—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–≤–µ—Ä—Ö (UI/CLI —Å–∞–º–∏ —Ä–µ—à–∞—é—Ç, –∫–∞–∫ –∏—Ö –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å).

    :param files: –ø—É—Ç–∏ –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–∞–º
    :param wait_index: –∂–¥–∞—Ç—å –ª–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ upload (True = –∫–∞–∫ –≤ UI)
    :param save_dir: –µ—Å–ª–∏ –∑–∞–¥–∞–Ω ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ø–∏—é –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ¬´–∫–∞–∫ –≤ –∂—É—Ä–Ω–∞–ª–µ¬ª –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    :param on_progress: –∫–æ–ª–±—ç–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Å—Ç—Ä–æ–∫–∞)
    :param user_instruction: —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ system.prompt (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç)
    :param model: –º–æ–¥–µ–ª—å –¥–ª—è Responses API
    :param system_prompt_path: –ø—É—Ç—å –∫ system.prompt
    :param auto_cleanup_min: —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (None/0 ‚Äî –Ω–µ —É–¥–∞–ª—è—Ç—å)
    :return: PipelineResult
    """
    log = (lambda s: on_progress(s)) if on_progress else (lambda s: None)

    # 1) –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Vector Store
    log("‚Äî –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É‚Ä¶")
    up = upload_to_vector_store_ex(
        files=files,
        on_progress=on_progress,
        wait_index=wait_index,
    )
    store_id = (up or {}).get("store_id")
    if not store_id:
        raise RuntimeError("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –±–µ–∑ store_id")
    log("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    # 2) –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if auto_cleanup_min and auto_cleanup_min > 0:
        try:
            schedule_cleanup(
                vector_store_id=store_id,
                delay_min=int(auto_cleanup_min),
                on_done=lambda sid: on_progress and on_progress(f"üóë –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–¥–∞–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {sid}"),
                on_error=lambda sid, e: on_progress and on_progress(f"‚ùå –ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ({sid}): {e}"),
            )
            log(f"‚è≥ –ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ {int(auto_cleanup_min)} –º–∏–Ω.")
        except Exception as e:
            log(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ: {e}")

    # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –Ω–µ –∂–¥–∞–ª–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ store_id
    if not wait_index:
        return PipelineResult(store_id=store_id, clean_json=None, saved_copy=None)

    # 3) –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ system.prompt (–≤–∞–ª√≠d–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON –≤–µ—Ä–Ω—ë—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π)
    log("‚Äî –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É‚Ä¶")
    clean_json = run_extraction_with_vector_store(
        store_id=store_id,
        user_instruction=user_instruction,
        model=model,
        system_prompt_path=system_prompt_path,
    )
    log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    # 4) –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ø–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª (–∫–∞–∫ –≤ –∂—É—Ä–Ω–∞–ª–µ), –µ—Å–ª–∏ –ø—Ä–æ—Å—è—Ç
    saved_copy = None
    if save_dir:
        try:
            saved_copy = _save_result_record(save_dir, store_id, clean_json)
            log(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {saved_copy}")
        except Exception as e:
            log(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ø–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

    return PipelineResult(store_id=store_id, clean_json=clean_json, saved_copy=saved_copy)
