# -*- coding: utf-8 -*-
import argparse
import sys
import json
import os
from datetime import datetime
from uuid import uuid4

import tkinter as tk
from tkinter import filedialog

from core.uploader import upload_to_vector_store_ex
from core.vector_store_query import run_extraction_with_vector_store  # –ø–∏—à–µ—Ç –≤ –∂—É—Ä–Ω–∞–ª —á–µ—Ä–µ–∑ append_result_entry:contentReference[oaicite:4]{index=4}
from infra.config import DEFAULT_MODEL, SYSTEM_PROMPT_PATH

def pick_files_via_dialog() -> list[str]:
    root = tk.Tk()
    root.withdraw()
    try:
        paths = filedialog.askopenfilenames(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
            filetypes=(
                ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "*.pdf *.doc *.docx *.xls *.xlsx *.txt"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*"),
            ),
        )
        return list(paths or [])
    finally:
        root.destroy()

def _save_result_record(save_dir: str, store_id: str, clean_json: str) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø–∏—Å—å —Ç–æ–≥–æ –∂–µ –≤–∏–¥–∞, —á—Ç–æ –∏ –≤ –∂—É—Ä–Ω–∞–ª–µ:
    {"ts": "...", "phase": "result", "result": <parsed clean_json>, "note": "validated"}
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
    """
    os.makedirs(save_dir, exist_ok=True)
    stamp = datetime.now().strftime("%Y%m%d-%H%M%S")
    suffix = uuid4().hex[:6]
    base = f"extract_{stamp}_{(store_id or 'noid').replace('/', '_')}_{suffix}.json"
    out_path = os.path.join(save_dir, base)

    try:
        payload = json.loads(clean_json)
    except Exception:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ)
        payload = {"raw_text": clean_json}

    record = {
        "ts": datetime.now().isoformat(timespec="seconds"),
        "phase": "result",
        "result": payload,
        "note": "validated"
    }

    with open(out_path, "w", encoding="utf-8") as f:
        json.dump(record, f, ensure_ascii=False, indent=2)

    return out_path

def main():
    parser = argparse.ArgumentParser(
        description="CLI –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ Vector Store"
    )
    parser.add_argument("files", nargs="*", help="–ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º.")
    parser.add_argument(
        "--no-wait-index",
        dest="no_wait_index",
        action="store_true",
        help="–ù–µ –∂–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∂–¥—ë–º).",
    )
    parser.add_argument(
        "--save-dir",
        dest="save_dir",
        help="–ü–∞–ø–∫–∞, –∫—É–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–∫–∞–∫ –≤ –∂—É—Ä–Ω–∞–ª–µ).",
    )
    args = parser.parse_args()

    files = args.files or pick_files_via_dialog()
    if not files:
        print("–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –í—ã—Ö–æ–¥.", flush=True)
        sys.exit(0)

    def on_progress(msg: str):
        print(msg, flush=True)

    print("‚Äî –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É‚Ä¶", flush=True)
    try:
        result = upload_to_vector_store_ex(
            files=files,
            on_progress=on_progress,
            wait_index=not args.no_wait_index,
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}", flush=True)
        sys.exit(1)

    store_id = result.get("store_id")
    print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê–ì–†–£–ó–ö–ò ===", flush=True)
    print(result.get("summary") or result, flush=True)
    if not store_id:
        sys.exit(2)

    if args.no_wait_index:
        print("‚ö† –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ (--no-wait-index). –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.", flush=True)
        return

    print("\n‚Äî –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É‚Ä¶", flush=True)
    try:
        clean_json = run_extraction_with_vector_store(
            store_id=store_id,
            user_instruction="–ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É.",
            model=DEFAULT_MODEL,
            system_prompt_path=SYSTEM_PROMPT_PATH,
        )
        # –ö—Ä–∞—Å–∏–≤–æ –≤ –∫–æ–Ω—Å–æ–ª—å
        try:
            pretty = json.dumps(json.loads(clean_json), ensure_ascii=False, indent=2)
        except Exception:
            pretty = clean_json
        print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø (JSON, –≤–∞–ª–∏–¥–∞—Ü–∏—è Pydantic) ===", flush=True)
        print(pretty, flush=True)
        print("=== –ö–û–ù–ï–¶ –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===\n", flush=True)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ¬´–∫–∞–∫ –≤ –∂—É—Ä–Ω–∞–ª–µ¬ª, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ
        if args.save_dir:
            out_path = _save_result_record(args.save_dir, store_id, clean_json)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {out_path}", flush=True)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", flush=True)

if __name__ == "__main__":
    main()
