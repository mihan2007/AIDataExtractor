# -*- coding: utf-8 -*-
import os
import requests
from typing import List


# —Å—Ç–∞–ª–æ:
from config import API_KEY_PATH as API_KEY_FILE, BASE_URL as API_BASE_URL, TIMEOUT as REQUEST_TIMEOUT


def load_api_key(path: str = API_KEY_FILE) -> str:
    if not os.path.isfile(path):
        raise FileNotFoundError(
            f"–§–∞–π–ª —Å API –∫–ª—é—á–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}\n"
            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ."
        )
    with open(path, "r", encoding="utf-8") as f:
        return f.read().strip()


def _auth_headers(api_key: str) -> dict:
    return {"Authorization": f"Bearer {api_key}"}


def list_all_vector_stores(api_key: str) -> List[dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö Vector Stores."""
    url = f"{API_BASE_URL}/vector_stores"
    resp = requests.get(url, headers=_auth_headers(api_key), timeout=REQUEST_TIMEOUT)
    resp.raise_for_status()
    return resp.json().get("data", [])


def list_files(api_key: str, vector_store_id: str) -> List[dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
    url = f"{API_BASE_URL}/vector_stores/{vector_store_id}/files"
    resp = requests.get(url, headers=_auth_headers(api_key), timeout=REQUEST_TIMEOUT)
    resp.raise_for_status()
    return resp.json().get("data", [])


def delete_file(api_key: str, vector_store_id: str, file_id: str) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ Vector Store."""
    url = f"{API_BASE_URL}/vector_stores/{vector_store_id}/files/{file_id}"
    resp = requests.delete(url, headers=_auth_headers(api_key), timeout=REQUEST_TIMEOUT)
    resp.raise_for_status()


def delete_vector_store(api_key: str, vector_store_id: str) -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å—ë —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
    url = f"{API_BASE_URL}/vector_stores/{vector_store_id}"
    resp = requests.delete(url, headers=_auth_headers(api_key), timeout=REQUEST_TIMEOUT)
    resp.raise_for_status()


def cleanup_store(vector_store_id: str) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ Vector Store –∏ –∑–∞—Ç–µ–º —Å–∞–º–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
    """
    api_key = load_api_key()
    try:
        files = list_files(api_key, vector_store_id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è {vector_store_id}: {e}")
        files = []

    for f in files:
        fid = f.get("id")
        if fid:
            try:
                delete_file(api_key, vector_store_id, fid)
                print(f"   ‚úÖ –§–∞–π–ª —É–¥–∞–ª—ë–Ω: {fid}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {fid}: {e}")

    try:
        delete_vector_store(api_key, vector_store_id)
        print(f"üóë –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–¥–∞–ª–µ–Ω–æ: {vector_store_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ {vector_store_id}: {e}")


def cleanup_all() -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –≤—Å–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
    api_key = load_api_key()
    stores = list_all_vector_stores(api_key)

    if not stores:
        print("‚úÖ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö Vector Stores ‚Äî –æ—á–∏—â–∞—Ç—å –Ω–µ—á–µ–≥–æ.")
        return

    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â: {len(stores)}")

    for store in stores:
        store_id = store.get("id")
        name = store.get("name", "(–±–µ–∑ –∏–º–µ–Ω–∏)")
        print(f"\nüóÇ –•—Ä–∞–Ω–∏–ª–∏—â–µ: {name} ({store_id})")

        try:
            files = list_files(api_key, store_id)
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
            continue

        for f in files:
            fid = f.get("id")
            try:
                delete_file(api_key, store_id, fid)
                print(f"   ‚úÖ –§–∞–π–ª —É–¥–∞–ª—ë–Ω: {fid}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {fid}: {e}")

        try:
            delete_vector_store(api_key, store_id)
            print("   üóë –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ {store_id}: {e}")

    print("\n‚ú® –í—Å–µ Vector Stores —É–¥–∞–ª–µ–Ω—ã.")


if __name__ == "__main__":
    cleanup_all()
