# -*- coding: utf-8 -*-
"""
–£–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• Vector Stores:
- –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –∫–∞–∂–¥–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
- –£–¥–∞–ª—è–µ—Ç —Å–∞–º–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
- –ù–∏–∫–∞–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ

–ó–∞–ø—É—Å–∫:
  python vector_store_cleanup_all.py
"""

import os
import requests

API_KEY_FILE = r"C:\API_keys\API_key_GPT.txt"
API_BASE_URL = "https://api.openai.com/v1"
REQUEST_TIMEOUT = (10, 90)


def load_api_key(path=API_KEY_FILE):
    if not os.path.isfile(path):
        raise FileNotFoundError(f"–§–∞–π–ª —Å API –∫–ª—é—á–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    with open(path, "r", encoding="utf-8") as f:
        return f.read().strip()


def _auth_headers(api_key: str, json_content: bool = False) -> dict:
    h = {"Authorization": f"Bearer {api_key}"}
    if json_content:
        h["Content-Type"] = "application/json"
    return h


def list_all_vector_stores(api_key: str):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –í–°–ï–• Vector Stores"""
    url = f"{API_BASE_URL}/vector_stores"
    stores = []
    after = None

    while True:
        params = {"limit": 100}
        if after:
            params["after"] = after

        resp = requests.get(url, headers=_auth_headers(api_key), params=params, timeout=REQUEST_TIMEOUT)
        resp.raise_for_status()
        data = resp.json()
        items = data.get("data", [])
        stores.extend(items)

        if data.get("has_more"):
            after = data.get("last_id") or (items[-1]["id"] if items else None)
            if not after:
                break
        else:
            break

    return stores


def list_files(api_key: str, store_id: str):
    """–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    url = f"{API_BASE_URL}/vector_stores/{store_id}/files"
    resp = requests.get(url, headers=_auth_headers(api_key), timeout=REQUEST_TIMEOUT)
    resp.raise_for_status()
    return resp.json().get("data", [])


def delete_file(api_key: str, store_id: str, file_id: str):
    """–£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Vector Store"""
    url = f"{API_BASE_URL}/vector_stores/{store_id}/files/{file_id}"
    resp = requests.delete(url, headers=_auth_headers(api_key), timeout=REQUEST_TIMEOUT)
    resp.raise_for_status()


def delete_vector_store(api_key: str, store_id: str):
    """–£–¥–∞–ª—è–µ–º —Å–∞–º Vector Store"""
    url = f"{API_BASE_URL}/vector_stores/{store_id}"
    resp = requests.delete(url, headers=_auth_headers(api_key), timeout=REQUEST_TIMEOUT)
    resp.raise_for_status()


def main():
    api_key = load_api_key()
    stores = list_all_vector_stores(api_key)

    if not stores:
        print("‚úÖ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö Vector Stores ‚Äî –æ—á–∏—â–∞—Ç—å –Ω–µ—á–µ–≥–æ.")
        return

    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â: {len(stores)}\n")

    for store in stores:
        store_id = store.get("id")
        name = store.get("name", "(–±–µ–∑ –∏–º–µ–Ω–∏)")
        print(f"üóÇ  –•—Ä–∞–Ω–∏–ª–∏—â–µ: {name} ({store_id})")

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        files = list_files(api_key, store_id)
        for f in files:
            fid = f.get("id")
            try:
                delete_file(api_key, store_id, fid)
                print(f"   ‚úÖ –§–∞–π–ª —É–¥–∞–ª—ë–Ω: {fid}")
            except requests.HTTPError as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {fid}: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        try:
            delete_vector_store(api_key, store_id)
            print(f"   üóë –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–¥–∞–ª–µ–Ω–æ.")
        except requests.HTTPError as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ {store_id}: {e}")

        print("-" * 50)

    print("\n‚ú® –í—Å–µ Vector Stores —É–¥–∞–ª–µ–Ω—ã.")


if __name__ == "__main__":
    main()
